var documenterSearchIndex = {"docs":
[{"location":"test_data/#Test-data-1","page":"Test data","title":"Test data","text":"","category":"section"},{"location":"test_data/#","page":"Test data","title":"Test data","text":"Test data const objects are smaller datasets designed to be used in tests for other packages. They include both Date and DateTime objects. All but one of the objects has an empty TimeArray meta field.","category":"page"},{"location":"test_data/#","page":"Test data","title":"Test data","text":"const Description First timestamp Number of rows\nop single column Date data 2000-01-03 500\ncl single column Date data 2000-01-03 500\nohlc four-column Date data 2000-01-03 500\nohlcv five-column Date data 2000-01-03 500\nmdata 1-column Date data with meta field 2000-01-03 500\ndatetime1 1-column DateTime data 2013-12-31T00:00:00 5\ndatetime2 1-column DateTime data 1961-12-31 00:00:00 5","category":"page"},{"location":"test_data/#Random-1","page":"Test data","title":"Random","text":"","category":"section"},{"location":"test_data/#","page":"Test data","title":"Test data","text":"Function Description First timestamp(*) Number of rows(*)\nrandom_cl random Close price 2020-01-01 500\nrandom_vol random Volume 2020-01-01 500\nrandom_ohlc random Open/High/Low/Close price data 2020-01-01 500\nrandom_ohlcv random Open/High/Low/Close/Volume data 2020-01-01 500","category":"page"},{"location":"test_data/#","page":"Test data","title":"Test data","text":"(*) these values are default values but can be changed passing a keyword argument such as start=Dates.DateTime(2024, 1, 1) and length=1000.","category":"page"},{"location":"company_financial_series/#Large-historical-data-sets-1","page":"Large historical data sets","title":"Large historical data sets","text":"","category":"section"},{"location":"company_financial_series/#","page":"Large historical data sets","title":"Large historical data sets","text":"Larger historical prices and volume EOD data is provided for the following companies:","category":"page"},{"location":"company_financial_series/#","page":"Large historical data sets","title":"Large historical data sets","text":"const Description Date range Number of rows\nAAPL Apple Inc. 1986 - 2012 8,336\nBA The Boeing Co. 1962 - 2012 13,090\nCAT Caterpillar Inc. 1962 - 2012 13,090\nDELL DELL Inc. 1988 - 2015 6,353\nEBAY eBay Inc. 1998 - 2016 3,842\nF Ford Motor Co. 1998 - 2016 10,491\nGM General Electric Co. 1962 - 2016 13,090","category":"page"},{"location":"getting_started/#Getting-Started-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/#","page":"Getting Started","title":"Getting Started","text":"MarketData is a registered package. To add it to your Julia packages, simply do the following in REPL:","category":"page"},{"location":"getting_started/#","page":"Getting Started","title":"Getting Started","text":"Pkg.add(\"MarketData\")","category":"page"},{"location":"getting_started/#","page":"Getting Started","title":"Getting Started","text":"The TimeSeries package is a dependency. Support is planned to convert these objects into either DataFrame or AxisArray objects, with those packages only being called if the constructors are called.","category":"page"},{"location":"downloads/#Downloading-from-remote-data-source-1","page":"Downloading from remote data source","title":"Downloading from remote data source","text":"","category":"section"},{"location":"downloads/#","page":"Downloading from remote data source","title":"Downloading from remote data source","text":"Three eponymous methods are provided for downloading free data, from Yahoo Finance (yahoo) the Federal Reserve St. Louis (fred) and the United Kingdom's Office for National Statistics (ons)","category":"page"},{"location":"downloads/#","page":"Downloading from remote data source","title":"Downloading from remote data source","text":"These methods take a string argument that represents the name of the desired data set to be downloaded.","category":"page"},{"location":"downloads/#","page":"Downloading from remote data source","title":"Downloading from remote data source","text":"These methods have default arguments. These defaults only apply when no argument is passed, otherwise the user is left with determining the correct name for the data of interest.","category":"page"},{"location":"downloads/#Yahoo-1","page":"Downloading from remote data source","title":"Yahoo","text":"","category":"section"},{"location":"downloads/#","page":"Downloading from remote data source","title":"Downloading from remote data source","text":"For the yahoo() method, the default data is the S&P 500 end-of-day daily prices. That symbol is named ^GSPC.","category":"page"},{"location":"downloads/#","page":"Downloading from remote data source","title":"Downloading from remote data source","text":"yahoo\nYahooOpt","category":"page"},{"location":"downloads/#MarketData.yahoo","page":"Downloading from remote data source","title":"MarketData.yahoo","text":"yahoo(symbol::AbstractString, opt::YahooOpt = YahooOpt())::TimeArray\nyahoo(symbol::Symbol, opt::YahooOpt = YahooOpt())::TimeArray\n\nThis is a wrapper for downloading historical stock prices from Yahoo Finance.\n\nThe yahoo method takes a stock name in the form of a string and returns a TimeSeries.TimeArray corresponding to the Yahoo Finance ticker. With no argument, the default historical time series is the S&P 500.\n\nExamples\n\nAAPL = yahoo(:AAPL)\nSPX = yahoo(\"^GSPC\")\nNQ = yahoo(\"^IXIC\")\n\njulia> start = DateTime(2018, 1, 1)\n2018-01-01T00:00:00\n\njulia> yahoo(:AAPL, YahooOpt(period1 = start))\n655×6 TimeArray{Float64,2,Date,Array{Float64,2}} 2018-01-02 to 2020-08-07\n...\n\nReferences\n\nhttps://finance.yahoo.com\n\nSee Also\n\nfred()  which accesses the St. Louis Federal Reserve financial and economic data sets.\nons()   which is a wrapper to download financial and economic time series data from the Office for National Statistics (ONS).\n\n\n\n\n\n","category":"function"},{"location":"downloads/#MarketData.YahooOpt","page":"Downloading from remote data source","title":"MarketData.YahooOpt","text":"struct YahooOpt <: AbstractQueryOpt\n  period1  # the start time\n  period2  # the end time\n  interval # \"1d\", \"1wk\" or \"1mo\"\n  events   # currently only `:history` supported\nend\n\nThe Yahoo Finance HTTP API query object.\n\nExamples\n\njulia> t = Dates.now()\n2020-08-09T01:38:04.735\n\njulia> YahooOpt(period1 = t - Year(2), period2 = t)\nYahooOpt{DateTime} with 4 entries:\n  :period1  => 1533778685\n  :period2  => 1596937085\n  :interval => \"1d\"\n  :events   => :history\n\n\n\n\n\n","category":"type"},{"location":"downloads/#FRED-1","page":"Downloading from remote data source","title":"FRED","text":"","category":"section"},{"location":"downloads/#","page":"Downloading from remote data source","title":"Downloading from remote data source","text":"The default data for the fred() method is CPIAUCNS, which represents the Consumer Price Index for All Urban Consumers data.","category":"page"},{"location":"downloads/#","page":"Downloading from remote data source","title":"Downloading from remote data source","text":"fred","category":"page"},{"location":"downloads/#MarketData.fred","page":"Downloading from remote data source","title":"MarketData.fred","text":"fred(data::String=\"CPIAUCNS\")::TimeArray\n\nThe fred() method is a wrapper to download financial and economic time series data from the St. Louis Federal Reserve (FRED).\n\nThe fred() method takes a string argument that corresponds to a series code from the St. Louis Federal Reserve (FRED) database. It returns the data in the TimeSeries.TimeArray data structure.  When no argument is provided, the default data set is the Consumer Price Index for All Urban Consumers: All Items (CPIAUCNS).\n\nExamples\n\nDGS = fred(\"DGS10\")\nCPI = fred()\n\nReferences\n\nhttps://research.stlouisfed.org/fred2\n\nSee Also\n\nyahoo() which is a wrapper to download financial time series for stocks from Yahoo Finance.\nons()   which is a wrapper to download financial and economic time series data from the Office for National Statistics (ONS).\n\n\n\n\n\n","category":"function"},{"location":"downloads/#ONS-1","page":"Downloading from remote data source","title":"ONS","text":"","category":"section"},{"location":"downloads/#","page":"Downloading from remote data source","title":"Downloading from remote data source","text":"For the ons() method, the default data is the L522 timeseries from the MM23 dataset, which represents the Consumer Price Index including housing costs, in the UK. This is the ONS' headline monthly price inflation statistic.","category":"page"},{"location":"downloads/#","page":"Downloading from remote data source","title":"Downloading from remote data source","text":"ons","category":"page"},{"location":"downloads/#MarketData.ons","page":"Downloading from remote data source","title":"MarketData.ons","text":"ons(timeseries::String=\"L522\", dataset::String=\"MM23\")::TimeArray\n\nThe ons() method is a wrapper to download financial and economic time series data from the Office for National Statistics (ONS).\n\nThe ons() method takes two string arguments corresponding to a dataset and timeseries code from  the ONS database, to explore the database, you can use https://www.ons.gov.uk/timeseriestool. It returns the data in the TimeSeries.TimeArray data structure with additional information in the meta field. The data might include monthly values, quarterly averages and yearly averages, with column names monthly, quarterly and yearly. The timestamps are the first day of the period.  When no argument is provided, the default dataset  is the Consumer Price Index including housing costs (CPIH) which is the ONS’s headline measure of inflation.\n\nExamples\n\nUK_RPI = (\"CHAW\",\"MM23\")\nUK_CPI = (\"D7BT\",\"MM23\")\nUK_CPIH = (\"L522\",\"MM23\")\n\nReferences\n\nhttps://www.ons.gov.uk/timeseriestool\n\nSee Also\n\nfred() which accesses the St. Louis Federal Reserve financial and economic data sets.\nyahoo() which is a wrapper from downloading financial time series for stocks from Yahoo Finance.\n\n\n\n\n\n","category":"function"},{"location":"#MarketData-Overview-1","page":"MarketData Overview","title":"MarketData Overview","text":"","category":"section"},{"location":"#","page":"MarketData Overview","title":"MarketData Overview","text":"The MarketData package provides open-source financial data for research and testing.","category":"page"},{"location":"#","page":"MarketData Overview","title":"MarketData Overview","text":"The data is from Quandl and is free end-of-day stock data. It is public domain without restrictions.","category":"page"},{"location":"#","page":"MarketData Overview","title":"MarketData Overview","text":"The TimeSeries TimeArray data structure is used to store the data, but conversion to other data structures, including DataFrames and AxisArrays, is supported.","category":"page"},{"location":"#Contents-1","page":"MarketData Overview","title":"Contents","text":"","category":"section"},{"location":"#","page":"MarketData Overview","title":"MarketData Overview","text":"Pages = [\n    \"getting_started.md\",\n    \"test_data.md\",\n    \"company_financial_series.md\",\n    \"downloads.md\",\n]","category":"page"},{"location":"helpers/#Helper-methods-1","page":"Helper methods","title":"Helper methods","text":"","category":"section"},{"location":"helpers/#","page":"Helper methods","title":"Helper methods","text":"Single-letter methods are provided to make it easier to extract specific financial time series columns. The five column names that are supported include o() for Open, h() for High, l() for Low, c() for Close and v() for Volume.:","category":"page"},{"location":"helpers/#","page":"Helper methods","title":"Helper methods","text":"using MarketData","category":"page"},{"location":"helpers/#","page":"Helper methods","title":"Helper methods","text":"o(AAPL)","category":"page"}]
}
